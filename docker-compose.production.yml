# Production setup: Application + Database + Reverse Proxy + Redis Cache
# Full production deployment with caching, reverse proxy, and database

services:
  apache:
    build:
      context: .
      dockerfile: Dockerfile.apache
    container_name: bookreview_apache
    ports:
      - "80:80"
    volumes:
      - uploads_data:/var/www/html/uploads
    depends_on:
      - web
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        CARGO_FEATURES: "redis-cache"
    container_name: bookreview_web
    environment:
      MONGO_URI: "mongodb://mongo:27017"
      DB_NAME: "bookreview_dev"
      ROCKET_ADDRESS: "0.0.0.0"
      ROCKET_PORT: "8000"
      SERVE_STATIC_FILES: "false"  # Disable static file serving when behind proxy
      UPLOADS_DIR: "/app/uploads"
      CACHE_URL: "redis://redis:6379"  # Enable Redis caching
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: bookreview_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
    sysctls:
      net.core.somaxconn: 1024
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  mongo:
    image: mongo:7
    container_name: bookreview_mongo
    command: ["--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' | grep 1"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

volumes:
  mongo_data:
  redis_data:
  uploads_data:
